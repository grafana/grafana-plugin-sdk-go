syntax = "proto3";
package pluginv2;

option go_package = "./;pluginv2";

//-----------------------------------------------
// Common
//-----------------------------------------------

message AppInstanceSettings {
  bytes jsonData = 3;
  map<string,string> decryptedSecureJsonData = 4;
  int64 lastUpdatedMS = 5;
}

message DataSourceInstanceSettings {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string user = 4;
  string database = 5;
  bool basicAuthEnabled = 6;
  string basicAuthUser = 7;
  bytes jsonData = 8;
  map<string,string> decryptedSecureJsonData = 9;
  int64 lastUpdatedMS = 10;
  string uid = 11;
}

message User {
  string login = 1;
  string name = 2;
  string email = 3;
  string role = 4;
}

message PluginContext {
  // The Grafana organization id the request originating from.
  int64 orgId = 1;

  // The unique identifier of the plugin the request  originating from.
  string pluginId = 2;

  // The Grafana user the request originating from.
  //
  // Will not be provided if Grafana backend initiated the request.
  User user = 3;

  // App plugin instance settings is the configured app instance settings.
  // In Grafana an app instance is an enabled app plugin in a
  // Grafana organization.
  //
  // Will only be set if request targeting an app instance.
  AppInstanceSettings appInstanceSettings = 4;

  // Data source instance settings is the configured data source instance
  // settings. In Grafana a data source instance is a created data source
  // in a Grafana organization.
  //
  // Will only be set if request targeting a data source instance.
  DataSourceInstanceSettings dataSourceInstanceSettings = 5;
}

//---------------------------------------------------------
// Resource service enables HTTP-style requests over gRPC.
//---------------------------------------------------------

service Resource {
  rpc CallResource(CallResourceRequest) returns (stream CallResourceResponse);
}

message StringList {
  repeated string values = 1;
}

message CallResourceRequest {
  PluginContext pluginContext = 1;
  string path = 2;
  string method = 3;
  string url = 4;
  map<string,StringList> headers = 5;
  bytes body = 6;
}

message CallResourceResponse {
  int32 code = 1;
  map<string,StringList> headers = 2;
  bytes body = 3;
}

//-----------------------------------------------
// Data
//-----------------------------------------------

service Data {
  rpc QueryData(QueryDataRequest) returns (QueryDataResponse);
}

message TimeRange {
  int64 fromEpochMS = 1;
  int64 toEpochMS = 2;
}

message DataQuery {
  string refId = 1;
  int64 maxDataPoints = 2;
  int64 intervalMS = 3;
  TimeRange timeRange = 4;
  bytes json = 5;
  string queryType = 6;
}

// QueryDataRequest
message QueryDataRequest {
  PluginContext pluginContext = 1;

  // Environment info
  map<string,string> headers = 2;

  // List of data queries
  repeated DataQuery queries = 3;
}

message QueryDataResponse {
  // Map of refId to response
  map<string,DataResponse> responses = 1;
}

message DataResponse {
  // Arrow encoded DataFrames
  // Frame has its own meta, warnings, and repeats refId
  repeated bytes frames = 1;
  string error = 2;
  bytes jsonMeta = 3; // Warning: Current ignored by frontend. Would be for metadata about the query.
}

//-----------------------------------------------
// Diagnostics
//-----------------------------------------------

service Diagnostics {
  rpc CheckHealth(CheckHealthRequest) returns (CheckHealthResponse);
  rpc CollectMetrics(CollectMetricsRequest) returns (CollectMetricsResponse);
}

message CollectMetricsRequest {
  PluginContext pluginContext = 1;
}

message CollectMetricsResponse {
  message Payload {
    bytes prometheus = 1;
  }

  Payload metrics = 1;
}

message CheckHealthRequest {
  PluginContext pluginContext = 1;
}

message CheckHealthResponse {
  enum HealthStatus {
    UNKNOWN = 0;
    OK = 1;
    ERROR = 2;
  }

  HealthStatus status = 1;
  string message = 2;
  bytes jsonDetails = 3;
}

//-----------------------------------------------------------------
// Stream -- EXPERIMENTAL and is subject to change until 8.0
//-----------------------------------------------------------------

service Stream {
  // SubscribeStream called when a user tries to subscribe to a plugin/datasource
  // managed channel path.
  rpc SubscribeStream(SubscribeStreamRequest) returns (SubscribeStreamResponse);

  // PublishStream called when a user tries to publish to a plugin/datasource
  // managed channel path.
  rpc PublishStream(PublishStreamRequest) returns (PublishStreamResponse);

  // RunStream will be initiated by Grafana to consume a stream where keepalive
  // option set to true. In this case RunStream will only be called once for the
  // first client successfully subscribed to a channel path. When Grafana detects
  // that there are no longer any subscribers inside a channel, the call will be
  // terminated until next active subscriber appears. Call termination can happen
  // with a delay.
  rpc RunStream(RunStreamRequest) returns (stream StreamPacket);
}

message SubscribeStreamRequest {
  PluginContext pluginContext = 1;

  // path part of channel.
  string path = 2;
}

message SubscribeStreamResponse {
  // ok should be true if subscribe is permitted, false otherwise.
  bool ok = 1;
  // human-friendly error message if ok is false.
  string error_message = 2;
  // schema for a channel path.
  bytes schema = 3;
  // keepalive tells Grafana to use RunStream call to consume
  // streaming packets from a plugin.
  bool keepalive = 4;
}

message PublishStreamRequest {
  PluginContext pluginContext = 1;

  // path part of a channel.
  string path = 2;
  // data that user wants to publish into a stream
  // (only JSON-encoded at the moment).
  bytes data = 3;
}

message PublishStreamResponse {
  // ok should be true if publish is permitted, false otherwise.
  bool ok = 1;
  // human-friendly error message if ok is false.
  string error_message = 2;
  // by default, it's a plugin responsibility to publish data
  // into a stream upon PublishStreamRequest but setting fallthrough
  // to true will make Grafana publish data itself (i.e. plugin just
  // works as permission proxy in this case).
  bool fallthrough = 3;
}

message RunStreamRequest {
  PluginContext pluginContext = 1;

  // path part of a channel.
  string path = 2;
}

message StreamPacket {
  enum StreamPacketType {
    DATA_FRAME = 0;
  }
  // type of payload, at the moment we only support JSON-encoded
  // data frames.
  StreamPacketType type = 1;
  // payload to publish into a channel.
  bytes payload = 2;
}
