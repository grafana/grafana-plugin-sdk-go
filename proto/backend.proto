syntax = "proto3";
import "google/protobuf/empty.proto";
package pluginv2;

option go_package = ".;pluginv2";

//-----------------------------------------------
// Common
//-----------------------------------------------

message DataSourceConfig {
  int64 id = 1;
  string name = 2;
  string url = 3;
  string user = 4;
  string database = 5;
  bool basicAuthEnabled = 6;
  string basicAuthUser = 7;
}

message PluginConfig {
  int64 orgId = 1;
  string pluginId = 2;
  string pluginType = 3;
  bytes jsonData = 4;
  map<string,string> decryptedSecureJsonData = 5;
  int64 updatedMS = 6;
  DataSourceConfig datasourceConfig = 7;
}

message User {
  string login = 1;
  string name = 2;
  string email = 3;
  string role = 4;
}

//-----------------------------------------------
// All Backend Plugins Implement
//-----------------------------------------------

service Core {
  // HTTP Style request
  rpc CallResource(CallResource.Request) returns (stream CallResource.Response);

  // Well typed query interface
  rpc DataQuery(DataQueryRequest) returns (DataQueryResponse);
}

//-----------------------------------------------
// Data Query
//-----------------------------------------------

message TimeRange {
  int64 fromEpochMS = 1;
  int64 toEpochMS = 2;
}

message DataQuery {
  string refId = 1;
  int64 maxDataPoints = 2;
  int64 intervalMS = 3;
  TimeRange timeRange = 4; // NOTE: this moved from QueryRequest in v1
  bytes json = 5; // Arbitrary structure (model?  modelJson in v1)
}

message DataQueryRequest {
  // Plugin Configuration
  PluginConfig config = 1;

  // Environment info
  map<string,string> headers = 2;

  // List of queries
  repeated DataQuery queries = 3;

  //Info about the user who calls the plugin.
  User user = 4;
}

message DataQueryResponse {
  // Arrow encoded DataFrames
  // Each frame encodes its own: Errors, meta, and refId
  repeated bytes frames = 1;

  // Additional response metadata
  map<string,string> metadata = 2;
}

//-----------------------------------------------
// HTTP style request
//-----------------------------------------------

message CallResource {
  message StringList {
    repeated string values = 1;
 }

  message Request {
    PluginConfig config = 1;
    string path = 2;
    string method = 3;
    string url = 4;
    map<string,StringList> headers = 5;
    bytes body = 6;
    User user = 7;
  }

  message Response {
    int32 code = 1;
    map<string,StringList> headers = 2;
    bytes body = 3;
  }
}

//-----------------------------------------------
// Diagnostics
//-----------------------------------------------

service Diagnostics {
  rpc CollectMetrics(CollectMetrics.Request) returns (CollectMetrics.Response);
  rpc CheckHealth(CheckHealth.Request) returns (CheckHealth.Response);
}

message CollectMetrics {
  message Request {
  }

  message Payload {
    bytes prometheus = 1;
  }

  message Response {
    Payload metrics = 1;
  }
}

message CheckHealth {
  message Request {
    PluginConfig config = 1;
  }

  message Response {
    enum HealthStatus {
      UNKNOWN = 0; // starting etc
      OK = 1;
      ERROR = 2;
    }

    HealthStatus status = 1;
    string message = 2;
    string jsonDetails = 3;
  }
}

//-----------------------------------------------
// Temp? for GEL Only.
// Callback can maybe be replaced with Grafana Platform in future iteration.
//-----------------------------------------------

service Transform {
  rpc DataQuery(DataQueryRequest) returns (DataQueryResponse);
}

service TransformCallBack {
  rpc DataQuery(DataQueryRequest) returns (DataQueryResponse);
}
