// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package dataframe

import "time"

//go:Uint8erate uint8ny -in=$GOFILE -out=nullable_vector.Uint8.go uint8 "Uint8=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableUint8Vector []*uint8

func newNullableUint8Vector(n int) *nullableUint8Vector {
	v := nullableUint8Vector(make([]*uint8, n))
	return &v
}

func (v *nullableUint8Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*uint8)
}

func (v *nullableUint8Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*uint8))
}

func (v *nullableUint8Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableUint8Vector) Len() int {
	return len((*v))
}

func (v *nullableUint8Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Uint16erate uint16ny -in=$GOFILE -out=nullable_vector.Uint16.go uint16 "Uint16=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableUint16Vector []*uint16

func newNullableUint16Vector(n int) *nullableUint16Vector {
	v := nullableUint16Vector(make([]*uint16, n))
	return &v
}

func (v *nullableUint16Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*uint16)
}

func (v *nullableUint16Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*uint16))
}

func (v *nullableUint16Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableUint16Vector) Len() int {
	return len((*v))
}

func (v *nullableUint16Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Uint32erate uint32ny -in=$GOFILE -out=nullable_vector.Uint32.go uint32 "Uint32=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableUint32Vector []*uint32

func newNullableUint32Vector(n int) *nullableUint32Vector {
	v := nullableUint32Vector(make([]*uint32, n))
	return &v
}

func (v *nullableUint32Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*uint32)
}

func (v *nullableUint32Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*uint32))
}

func (v *nullableUint32Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableUint32Vector) Len() int {
	return len((*v))
}

func (v *nullableUint32Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Uint64erate uint64ny -in=$GOFILE -out=nullable_vector.Uint64.go uint64 "Uint64=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableUint64Vector []*uint64

func newNullableUint64Vector(n int) *nullableUint64Vector {
	v := nullableUint64Vector(make([]*uint64, n))
	return &v
}

func (v *nullableUint64Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*uint64)
}

func (v *nullableUint64Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*uint64))
}

func (v *nullableUint64Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableUint64Vector) Len() int {
	return len((*v))
}

func (v *nullableUint64Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Int8erate int8ny -in=$GOFILE -out=nullable_vector.Int8.go int8 "Int8=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableInt8Vector []*int8

func newNullableInt8Vector(n int) *nullableInt8Vector {
	v := nullableInt8Vector(make([]*int8, n))
	return &v
}

func (v *nullableInt8Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*int8)
}

func (v *nullableInt8Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*int8))
}

func (v *nullableInt8Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableInt8Vector) Len() int {
	return len((*v))
}

func (v *nullableInt8Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Int16erate int16ny -in=$GOFILE -out=nullable_vector.Int16.go int16 "Int16=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableInt16Vector []*int16

func newNullableInt16Vector(n int) *nullableInt16Vector {
	v := nullableInt16Vector(make([]*int16, n))
	return &v
}

func (v *nullableInt16Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*int16)
}

func (v *nullableInt16Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*int16))
}

func (v *nullableInt16Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableInt16Vector) Len() int {
	return len((*v))
}

func (v *nullableInt16Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Int32erate int32ny -in=$GOFILE -out=nullable_vector.Int32.go int32 "Int32=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableInt32Vector []*int32

func newNullableInt32Vector(n int) *nullableInt32Vector {
	v := nullableInt32Vector(make([]*int32, n))
	return &v
}

func (v *nullableInt32Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*int32)
}

func (v *nullableInt32Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*int32))
}

func (v *nullableInt32Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableInt32Vector) Len() int {
	return len((*v))
}

func (v *nullableInt32Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Int64erate int64ny -in=$GOFILE -out=nullable_vector.Int64.go int64 "Int64=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableInt64Vector []*int64

func newNullableInt64Vector(n int) *nullableInt64Vector {
	v := nullableInt64Vector(make([]*int64, n))
	return &v
}

func (v *nullableInt64Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*int64)
}

func (v *nullableInt64Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*int64))
}

func (v *nullableInt64Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableInt64Vector) Len() int {
	return len((*v))
}

func (v *nullableInt64Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Float32erate float32ny -in=$GOFILE -out=nullable_vector.Float32.go float32 "Float32=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableFloat32Vector []*float32

func newNullableFloat32Vector(n int) *nullableFloat32Vector {
	v := nullableFloat32Vector(make([]*float32, n))
	return &v
}

func (v *nullableFloat32Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*float32)
}

func (v *nullableFloat32Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*float32))
}

func (v *nullableFloat32Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableFloat32Vector) Len() int {
	return len((*v))
}

func (v *nullableFloat32Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Float64erate float64ny -in=$GOFILE -out=nullable_vector.Float64.go float64 "Float64=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableFloat64Vector []*float64

func newNullableFloat64Vector(n int) *nullableFloat64Vector {
	v := nullableFloat64Vector(make([]*float64, n))
	return &v
}

func (v *nullableFloat64Vector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*float64)
}

func (v *nullableFloat64Vector) Append(i interface{}) {
	(*v) = append((*v), i.(*float64))
}

func (v *nullableFloat64Vector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableFloat64Vector) Len() int {
	return len((*v))
}

func (v *nullableFloat64Vector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Stringerate stringny -in=$GOFILE -out=nullable_vector.String.go string "String=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableStringVector []*string

func newNullableStringVector(n int) *nullableStringVector {
	v := nullableStringVector(make([]*string, n))
	return &v
}

func (v *nullableStringVector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*string)
}

func (v *nullableStringVector) Append(i interface{}) {
	(*v) = append((*v), i.(*string))
}

func (v *nullableStringVector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableStringVector) Len() int {
	return len((*v))
}

func (v *nullableStringVector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:Boolerate boolny -in=$GOFILE -out=nullable_vector.Bool.go bool "Bool=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableBoolVector []*bool

func newNullableBoolVector(n int) *nullableBoolVector {
	v := nullableBoolVector(make([]*bool, n))
	return &v
}

func (v *nullableBoolVector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*bool)
}

func (v *nullableBoolVector) Append(i interface{}) {
	(*v) = append((*v), i.(*bool))
}

func (v *nullableBoolVector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableBoolVector) Len() int {
	return len((*v))
}

func (v *nullableBoolVector) PrimitiveType() VectorPType {
	return vectorPType(v)
}

//go:TimeTimeerate timeTimeny -in=$GOFILE -out=nullable_vector.TimeTime.go time.Time "TimeTime=uint8,uint16,uint32,uint64,int8,int16,int32,int64,float32,float64,string,bool,time.Time"

type nullableTimeTimeVector []*time.Time

func newNullableTimeTimeVector(n int) *nullableTimeTimeVector {
	v := nullableTimeTimeVector(make([]*time.Time, n))
	return &v
}

func (v *nullableTimeTimeVector) Set(idx int, i interface{}) {
	(*v)[idx] = i.(*time.Time)
}

func (v *nullableTimeTimeVector) Append(i interface{}) {
	(*v) = append((*v), i.(*time.Time))
}

func (v *nullableTimeTimeVector) At(i int) interface{} {
	return (*v)[i]
}

func (v *nullableTimeTimeVector) Len() int {
	return len((*v))
}

func (v *nullableTimeTimeVector) PrimitiveType() VectorPType {
	return vectorPType(v)
}
