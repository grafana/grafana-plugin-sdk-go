// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package dataframe

import "time"

type nullableInt64Vector struct {
	items []*int64
	pType VectorPType
}

func newNullableInt64Vector(n int, pType VectorPType) *nullableInt64Vector {
	return &nullableInt64Vector{items: make([]*int64, n), pType: pType}
}

func (v *nullableInt64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(*int64)
}

func (v *nullableInt64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(*int64))
}

func (v *nullableInt64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *nullableInt64Vector) Len() int {
	return len((*v).items)
}

func (v *nullableInt64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type nullableUint64Vector struct {
	items []*uint64
	pType VectorPType
}

func newNullableUint64Vector(n int, pType VectorPType) *nullableUint64Vector {
	return &nullableUint64Vector{items: make([]*uint64, n), pType: pType}
}

func (v *nullableUint64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(*uint64)
}

func (v *nullableUint64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(*uint64))
}

func (v *nullableUint64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *nullableUint64Vector) Len() int {
	return len((*v).items)
}

func (v *nullableUint64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type nullableFloat64Vector struct {
	items []*float64
	pType VectorPType
}

func newNullableFloat64Vector(n int, pType VectorPType) *nullableFloat64Vector {
	return &nullableFloat64Vector{items: make([]*float64, n), pType: pType}
}

func (v *nullableFloat64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(*float64)
}

func (v *nullableFloat64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(*float64))
}

func (v *nullableFloat64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *nullableFloat64Vector) Len() int {
	return len((*v).items)
}

func (v *nullableFloat64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type nullableStringVector struct {
	items []*string
	pType VectorPType
}

func newNullableStringVector(n int, pType VectorPType) *nullableStringVector {
	return &nullableStringVector{items: make([]*string, n), pType: pType}
}

func (v *nullableStringVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(*string)
}

func (v *nullableStringVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(*string))
}

func (v *nullableStringVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *nullableStringVector) Len() int {
	return len((*v).items)
}

func (v *nullableStringVector) PrimitiveType() VectorPType {
	return (*v).pType
}

type nullableBoolVector struct {
	items []*bool
	pType VectorPType
}

func newNullableBoolVector(n int, pType VectorPType) *nullableBoolVector {
	return &nullableBoolVector{items: make([]*bool, n), pType: pType}
}

func (v *nullableBoolVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(*bool)
}

func (v *nullableBoolVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(*bool))
}

func (v *nullableBoolVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *nullableBoolVector) Len() int {
	return len((*v).items)
}

func (v *nullableBoolVector) PrimitiveType() VectorPType {
	return (*v).pType
}

type nullableTimeTimeVector struct {
	items []*time.Time
	pType VectorPType
}

func newNullableTimeTimeVector(n int, pType VectorPType) *nullableTimeTimeVector {
	return &nullableTimeTimeVector{items: make([]*time.Time, n), pType: pType}
}

func (v *nullableTimeTimeVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(*time.Time)
}

func (v *nullableTimeTimeVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(*time.Time))
}

func (v *nullableTimeTimeVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *nullableTimeTimeVector) Len() int {
	return len((*v).items)
}

func (v *nullableTimeTimeVector) PrimitiveType() VectorPType {
	return (*v).pType
}
