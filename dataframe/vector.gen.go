// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package dataframe

import "time"

type Uint8Vector struct {
	items []uint8
	pType VectorPType
}

func newUint8Vector(n int, pType VectorPType) *Uint8Vector {
	return &Uint8Vector{
		items: make([]uint8, n),
		pType: pType,
	}
}

func (v *Uint8Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(uint8)
}

func (v *Uint8Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(uint8))
}

func (v *Uint8Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Uint8Vector) Len() int {
	return len((*v).items)
}

func (v *Uint8Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Uint16Vector struct {
	items []uint16
	pType VectorPType
}

func newUint16Vector(n int, pType VectorPType) *Uint16Vector {
	return &Uint16Vector{
		items: make([]uint16, n),
		pType: pType,
	}
}

func (v *Uint16Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(uint16)
}

func (v *Uint16Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(uint16))
}

func (v *Uint16Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Uint16Vector) Len() int {
	return len((*v).items)
}

func (v *Uint16Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Uint32Vector struct {
	items []uint32
	pType VectorPType
}

func newUint32Vector(n int, pType VectorPType) *Uint32Vector {
	return &Uint32Vector{
		items: make([]uint32, n),
		pType: pType,
	}
}

func (v *Uint32Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(uint32)
}

func (v *Uint32Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(uint32))
}

func (v *Uint32Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Uint32Vector) Len() int {
	return len((*v).items)
}

func (v *Uint32Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Uint64Vector struct {
	items []uint64
	pType VectorPType
}

func newUint64Vector(n int, pType VectorPType) *Uint64Vector {
	return &Uint64Vector{
		items: make([]uint64, n),
		pType: pType,
	}
}

func (v *Uint64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(uint64)
}

func (v *Uint64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(uint64))
}

func (v *Uint64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Uint64Vector) Len() int {
	return len((*v).items)
}

func (v *Uint64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Int8Vector struct {
	items []int8
	pType VectorPType
}

func newInt8Vector(n int, pType VectorPType) *Int8Vector {
	return &Int8Vector{
		items: make([]int8, n),
		pType: pType,
	}
}

func (v *Int8Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(int8)
}

func (v *Int8Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(int8))
}

func (v *Int8Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Int8Vector) Len() int {
	return len((*v).items)
}

func (v *Int8Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Int16Vector struct {
	items []int16
	pType VectorPType
}

func newInt16Vector(n int, pType VectorPType) *Int16Vector {
	return &Int16Vector{
		items: make([]int16, n),
		pType: pType,
	}
}

func (v *Int16Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(int16)
}

func (v *Int16Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(int16))
}

func (v *Int16Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Int16Vector) Len() int {
	return len((*v).items)
}

func (v *Int16Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Int32Vector struct {
	items []int32
	pType VectorPType
}

func newInt32Vector(n int, pType VectorPType) *Int32Vector {
	return &Int32Vector{
		items: make([]int32, n),
		pType: pType,
	}
}

func (v *Int32Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(int32)
}

func (v *Int32Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(int32))
}

func (v *Int32Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Int32Vector) Len() int {
	return len((*v).items)
}

func (v *Int32Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Int64Vector struct {
	items []int64
	pType VectorPType
}

func newInt64Vector(n int, pType VectorPType) *Int64Vector {
	return &Int64Vector{
		items: make([]int64, n),
		pType: pType,
	}
}

func (v *Int64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(int64)
}

func (v *Int64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(int64))
}

func (v *Int64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Int64Vector) Len() int {
	return len((*v).items)
}

func (v *Int64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Float32Vector struct {
	items []float32
	pType VectorPType
}

func newFloat32Vector(n int, pType VectorPType) *Float32Vector {
	return &Float32Vector{
		items: make([]float32, n),
		pType: pType,
	}
}

func (v *Float32Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(float32)
}

func (v *Float32Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(float32))
}

func (v *Float32Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Float32Vector) Len() int {
	return len((*v).items)
}

func (v *Float32Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Float64Vector struct {
	items []float64
	pType VectorPType
}

func newFloat64Vector(n int, pType VectorPType) *Float64Vector {
	return &Float64Vector{
		items: make([]float64, n),
		pType: pType,
	}
}

func (v *Float64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(float64)
}

func (v *Float64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(float64))
}

func (v *Float64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Float64Vector) Len() int {
	return len((*v).items)
}

func (v *Float64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type StringVector struct {
	items []string
	pType VectorPType
}

func newStringVector(n int, pType VectorPType) *StringVector {
	return &StringVector{
		items: make([]string, n),
		pType: pType,
	}
}

func (v *StringVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(string)
}

func (v *StringVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(string))
}

func (v *StringVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *StringVector) Len() int {
	return len((*v).items)
}

func (v *StringVector) PrimitiveType() VectorPType {
	return (*v).pType
}

type BoolVector struct {
	items []bool
	pType VectorPType
}

func newBoolVector(n int, pType VectorPType) *BoolVector {
	return &BoolVector{
		items: make([]bool, n),
		pType: pType,
	}
}

func (v *BoolVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(bool)
}

func (v *BoolVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(bool))
}

func (v *BoolVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *BoolVector) Len() int {
	return len((*v).items)
}

func (v *BoolVector) PrimitiveType() VectorPType {
	return (*v).pType
}

type TimeTimeVector struct {
	items []time.Time
	pType VectorPType
}

func newTimeTimeVector(n int, pType VectorPType) *TimeTimeVector {
	return &TimeTimeVector{
		items: make([]time.Time, n),
		pType: pType,
	}
}

func (v *TimeTimeVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(time.Time)
}

func (v *TimeTimeVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(time.Time))
}

func (v *TimeTimeVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *TimeTimeVector) Len() int {
	return len((*v).items)
}

func (v *TimeTimeVector) PrimitiveType() VectorPType {
	return (*v).pType
}
