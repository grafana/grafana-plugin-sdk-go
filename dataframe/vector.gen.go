// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package dataframe

import "time"

type Int64Vector struct {
	items []int64
	pType VectorPType
}

func newInt64Vector(n int, pType VectorPType) *Int64Vector {
	return &Int64Vector{
		items: make([]int64, n),
		pType: pType,
	}
}

func (v *Int64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(int64)
}

func (v *Int64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(int64))
}

func (v *Int64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Int64Vector) Len() int {
	return len((*v).items)
}

func (v *Int64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Uint64Vector struct {
	items []uint64
	pType VectorPType
}

func newUint64Vector(n int, pType VectorPType) *Uint64Vector {
	return &Uint64Vector{
		items: make([]uint64, n),
		pType: pType,
	}
}

func (v *Uint64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(uint64)
}

func (v *Uint64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(uint64))
}

func (v *Uint64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Uint64Vector) Len() int {
	return len((*v).items)
}

func (v *Uint64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type Float64Vector struct {
	items []float64
	pType VectorPType
}

func newFloat64Vector(n int, pType VectorPType) *Float64Vector {
	return &Float64Vector{
		items: make([]float64, n),
		pType: pType,
	}
}

func (v *Float64Vector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(float64)
}

func (v *Float64Vector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(float64))
}

func (v *Float64Vector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *Float64Vector) Len() int {
	return len((*v).items)
}

func (v *Float64Vector) PrimitiveType() VectorPType {
	return (*v).pType
}

type StringVector struct {
	items []string
	pType VectorPType
}

func newStringVector(n int, pType VectorPType) *StringVector {
	return &StringVector{
		items: make([]string, n),
		pType: pType,
	}
}

func (v *StringVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(string)
}

func (v *StringVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(string))
}

func (v *StringVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *StringVector) Len() int {
	return len((*v).items)
}

func (v *StringVector) PrimitiveType() VectorPType {
	return (*v).pType
}

type BoolVector struct {
	items []bool
	pType VectorPType
}

func newBoolVector(n int, pType VectorPType) *BoolVector {
	return &BoolVector{
		items: make([]bool, n),
		pType: pType,
	}
}

func (v *BoolVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(bool)
}

func (v *BoolVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(bool))
}

func (v *BoolVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *BoolVector) Len() int {
	return len((*v).items)
}

func (v *BoolVector) PrimitiveType() VectorPType {
	return (*v).pType
}

type TimeTimeVector struct {
	items []time.Time
	pType VectorPType
}

func newTimeTimeVector(n int, pType VectorPType) *TimeTimeVector {
	return &TimeTimeVector{
		items: make([]time.Time, n),
		pType: pType,
	}
}

func (v *TimeTimeVector) Set(idx int, i interface{}) {
	(*v).items[idx] = i.(time.Time)
}

func (v *TimeTimeVector) Append(i interface{}) {
	(*v).items = append((*v).items, i.(time.Time))
}

func (v *TimeTimeVector) At(i int) interface{} {
	return (*v).items[i]
}

func (v *TimeTimeVector) Len() int {
	return len((*v).items)
}

func (v *TimeTimeVector) PrimitiveType() VectorPType {
	return (*v).pType
}
