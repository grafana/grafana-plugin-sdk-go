package sign

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

const (
	testRSAKey = `-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQC35vznv35Kaby20gu+RQBDj/kHhPd64b6p9TKKxqiAs8kukNFj
Q8keR6MOO41Md0Jh4b/ZSo1O3C3K3K587NORJDWz0H2wVyTWDvSMI36nI/EnGDhh
4fImv5E/9jIvhOxCJ3Dej57//tMt8TEG1ZETrAKzUvB7EfCfsnazGraMQwIDAQAB
AoGAfbFh4B+w+LlGY4oyvow4vvTTV4FZCOLsRwuwzMs09iprcelHQ9pbxtddqeeo
DsBgXbhHQQPEi0bQAZxNolLX0m4nQ8n9H6by42qOJlwywYZIl7Di3aWYiOiT56v7
PfqCsShSqsvWH8Ok4Jy6/Vcc4QcO4mGi8y8EZdSqfytGvkkCQQDhO+1Y4x36ETAh
NOQx1E/psPuSH8H6YeDoWYeap5z1KXzN4eTo01p8ckPSD93uXIig7LmfIWPMqlGV
yOBSyqD/AkEA0QXBLeDksi8hX8B2XOMfY9hWOBwBRXrlKX6TVF/9Kw+ulJpe3sU5
lc53oytpk1VwXAfJrjNRqyIIIRnFyTJQvQJAMBgFxFcqzXziFBUhLOqy7amW7krN
ttMznSmQ5RspTsg/GA9GO9j1l2EmzjIJJ56mpgYmVK5iiw9LQHqWO9d8rQJASUDz
CtkeTTQnRh91W+hdP+i5jsCB0Y/YcEpj59YcK9M7I+lWBkyoec/6Lb0xKuluj1JL
ZDmoDYnHv5IAtxpjIQJASxC/V51AHfuQ+rWvbZ6jzoHW6owbFpC2RbZPtFanOlda
ozjy/YI5hvWLr/bre/wZ3N81pLA9lPgEpJiOPYem3Q==
-----END RSA PRIVATE KEY-----
`
	testECDSAKey = `-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgYH3q1su2TRDIr4RB
2okegCNvfhn/Q9CycAXtPnfYsZehRANCAARSs6LcDI314KqKqGHbv2FLGoMXjm6B
p6/mP7VLRqyPpiGmhCEKXD5R/695X5JYQRBF34hn2XZpMCW2z2Lr+d6s
-----END PRIVATE KEY-----
`
)

func Test_SignECDSA(t *testing.T) {
	signer, err := ParsePrivateKey([]byte(testECDSAKey))
	assert.NoError(t, err)
	assert.Equal(t, "ES256", signer.Alg())
	signature, err := signer.Sign([]byte("hello"))
	assert.NoError(t, err)
	assert.Len(t, signature, 64)
}

func Test_SignRSA(t *testing.T) {
	signer, err := ParsePrivateKey([]byte(testRSAKey))
	assert.NoError(t, err)
	assert.Equal(t, signer.Alg(), "RS256")
	signature, err := signer.Sign([]byte("hello"))
	assert.NoError(t, err)
	expected := []uint8{0x6a, 0xcb, 0x51, 0x81, 0x4, 0x5e, 0xb4, 0x90, 0x44, 0x6a, 0x2a, 0xff, 0x4f, 0x58, 0x12, 0x49, 0x14, 0x97, 0x3c, 0x9f, 0xae, 0x24, 0x62, 0x2a, 0xd2, 0xfb, 0xa0, 0x64, 0x16, 0x80, 0x34, 0xdc, 0xa3, 0x9f, 0x42, 0xdc, 0x31, 0x1, 0x8b, 0x50, 0x23, 0xa1, 0x38, 0x29, 0xc7, 0xe3, 0x19, 0x64, 0x51, 0xa9, 0xa4, 0x68, 0x67, 0x19, 0x85, 0x41, 0x4b, 0x50, 0x88, 0x31, 0x3, 0x21, 0x43, 0xee, 0xe9, 0x8a, 0x2a, 0x73, 0xe3, 0x83, 0x79, 0x75, 0xb6, 0x54, 0x5f, 0x41, 0xda, 0xd1, 0xe0, 0xe6, 0xa8, 0x64, 0x2d, 0x38, 0x10, 0x9b, 0x21, 0xbe, 0x3f, 0xeb, 0x2f, 0xc0, 0x99, 0x7c, 0x7d, 0x2, 0xad, 0xa2, 0x54, 0xf6, 0x20, 0x59, 0x50, 0xe4, 0xba, 0xc9, 0xd8, 0x65, 0xd, 0xa6, 0xa9, 0xe6, 0x9d, 0xf5, 0x80, 0x2e, 0x6c, 0x57, 0x5e, 0x74, 0xb, 0x9b, 0xa, 0x77, 0x21, 0x7c, 0x2c, 0xad}
	assert.Equal(t, expected, signature)
}
