// Code generated by genalias. DO NOT EDIT.

package backend

import (
	"context"
	"encoding/json"
	"github.com/grafana/grafana-plugin-sdk-go/backend/contracts"
	"github.com/grafana/grafana-plugin-sdk-go/backend/httpclient"
	"github.com/grafana/grafana-plugin-sdk-go/backend/useragent"
	"github.com/grafana/grafana-plugin-sdk-go/data"
	"github.com/grafana/grafana-plugin-sdk-go/experimental/status"
)

const (
	AdmissionRequestCreate = contracts.AdmissionRequestCreate

	AdmissionRequestDelete = contracts.AdmissionRequestDelete

	AdmissionRequestUpdate = contracts.AdmissionRequestUpdate

	AppClientSecret = contracts.AppClientSecret

	AppURL = contracts.AppURL

	ConcurrentQueryCount = contracts.ConcurrentQueryCount

	// CookiesHeaderName the header name used for forwarding
	// cookies.
	CookiesHeaderName = contracts.CookiesHeaderName

	EndpointCallResource = contracts.EndpointCallResource

	// EndpointCheckHealth friendly name for the check health endpoint/handler.
	EndpointCheckHealth = contracts.EndpointCheckHealth

	// EndpointCollectMetrics friendly name for the collect metrics endpoint/handler.
	EndpointCollectMetrics = contracts.EndpointCollectMetrics

	// EndpointConvertObjects friendly name for the convert objects endpoint/handler.
	EndpointConvertObjects = contracts.EndpointConvertObjects

	// EndpointMutateAdmission friendly name for the mutate admission endpoint/handler.
	EndpointMutateAdmission = contracts.EndpointMutateAdmission

	// EndpointPublishStream friendly name for the publish stream endpoint/handler.
	EndpointPublishStream = contracts.EndpointPublishStream

	EndpointQueryData = contracts.EndpointQueryData

	// EndpointRunStream friendly name for the run stream endpoint/handler.
	EndpointRunStream = contracts.EndpointRunStream

	// EndpointSubscribeStream friendly name for the subscribe stream endpoint/handler.
	EndpointSubscribeStream = contracts.EndpointSubscribeStream

	// EndpointValidateAdmission friendly name for the validate admission endpoint/handler.
	EndpointValidateAdmission = contracts.EndpointValidateAdmission

	// GrafanaUserSignInTokenHeaderName the header name used for forwarding
	// the SignIn token of a Grafana User.
	// Requires idForwarded feature toggle enabled.
	GrafanaUserSignInTokenHeaderName = contracts.GrafanaUserSignInTokenHeaderName

	// HealthStatusError means the plugin is in an error state.
	HealthStatusError = contracts.HealthStatusError

	// HealthStatusOk means the status of the plugin is good.
	HealthStatusOk = contracts.HealthStatusOk

	// HealthStatusUnknown means the status of the plugin is unknown.
	HealthStatusUnknown = contracts.HealthStatusUnknown

	// OAuthIdentityIDTokenHeaderName the header name used for forwarding
	// OAuth Identity ID token.
	OAuthIdentityIDTokenHeaderName = contracts.OAuthIdentityIDTokenHeaderName

	// OAuthIdentityTokenHeaderName the header name used for forwarding
	// OAuth Identity access token.
	OAuthIdentityTokenHeaderName = contracts.OAuthIdentityTokenHeaderName

	// PublishStreamStatusNotFound means stream does not exist at all.
	PublishStreamStatusNotFound = contracts.PublishStreamStatusNotFound

	// PublishStreamStatusOK means publication is allowed.
	PublishStreamStatusOK = contracts.PublishStreamStatusOK

	// PublishStreamStatusPermissionDenied means that user is not allowed to publish.
	PublishStreamStatusPermissionDenied = contracts.PublishStreamStatusPermissionDenied

	ResponseLimit = contracts.ResponseLimit

	SQLMaxConnLifetimeSecondsDefault = contracts.SQLMaxConnLifetimeSecondsDefault

	SQLMaxIdleConnsDefault = contracts.SQLMaxIdleConnsDefault

	SQLMaxOpenConnsDefault = contracts.SQLMaxOpenConnsDefault

	SQLRowLimit = contracts.SQLRowLimit

	// StatusBadGateway means that the data source, while acting as a gateway
	// or proxy, received an invalid response from downstream.
	// HTTP status code 502.
	StatusBadGateway = contracts.StatusBadGateway

	// StatusBadRequest means that the data source was unable to parse the
	// parameters or payload for the request.
	// HTTP status code 400.
	StatusBadRequest = contracts.StatusBadRequest

	// StatusForbidden means that the data source refuses to perform the
	// requested action for the authenticated user.
	// HTTP status code 403.
	StatusForbidden = contracts.StatusForbidden

	// StatusInternal means that the data source acknowledges that there's
	// an error, but that there is nothing the client can do to fix it.
	// HTTP status code 500.
	StatusInternal = contracts.StatusInternal

	// StatusNotFound means that the data source does not have any
	// corresponding document to return to the request.
	// HTTP status code 404.
	StatusNotFound = contracts.StatusNotFound

	// StatusNotImplemented means that the data source does not support the
	// requested action. Typically used during development of new
	// features.
	// HTTP status code 501.
	StatusNotImplemented = contracts.StatusNotImplemented

	// StatusOK means that the action was successful.
	// HTTP status code 200.
	StatusOK = contracts.StatusOK

	// StatusTimeout means that the data source did not complete the request
	// within the required time and aborted the action.
	// HTTP status code 504.
	StatusTimeout = contracts.StatusTimeout

	// StatusTooManyRequests means that the client is rate limited
	// by the data source and should back-off before trying again.
	// HTTP status code 429.
	StatusTooManyRequests = contracts.StatusTooManyRequests

	// StatusUnauthorized means that the data source does not recognize the
	// client's authentication, either because it has not been provided
	// or is invalid for the operation.
	// HTTP status code 401.
	StatusUnauthorized = contracts.StatusUnauthorized

	// StatusUnknown implies an error that should be updated to contain
	// an accurate status code, as none has been provided.
	// HTTP status code 500.
	StatusUnknown = contracts.StatusUnknown

	// StatusValidationFailed means that the data source was able to parse
	// the payload for the request, but it failed one or more validation
	// checks.
	// HTTP status code 400.
	StatusValidationFailed = contracts.StatusValidationFailed

	// SubscribeStreamStatusNotFound means stream does not exist at all.
	SubscribeStreamStatusNotFound = contracts.SubscribeStreamStatusNotFound

	// SubscribeStreamStatusOK means subscription is allowed.
	SubscribeStreamStatusOK = contracts.SubscribeStreamStatusOK

	// SubscribeStreamStatusPermissionDenied means that user is not allowed to subscribe.
	SubscribeStreamStatusPermissionDenied = contracts.SubscribeStreamStatusPermissionDenied

	UserFacingDefaultError = contracts.UserFacingDefaultError
)

type (
	// AdmissionHandler is an EXPERIMENTAL service that allows checking objects before they are saved
	// This is modeled after the kubernetes model for admission controllers
	// Since grafana 11.1, this feature is under active development and will continue to evolve in 2024
	// This may also be replaced with a more native kubernetes solution that does not work with existing tooling
	AdmissionHandler = contracts.AdmissionHandler

	AdmissionRequest = contracts.AdmissionRequest

	// Operation is the type of resource operation being checked for admission control
	// https://github.com/kubernetes/kubernetes/blob/v1.30.0/pkg/apis/admission/types.go#L158
	AdmissionRequestOperation = contracts.AdmissionRequestOperation

	// AppInstanceSettings represents settings for an app instance.
	//
	// In Grafana an app instance is an app plugin of certain
	// type that have been configured and enabled in a Grafana organization.
	AppInstanceSettings = contracts.AppInstanceSettings

	// CallResourceHandler handles resource calls.
	CallResourceHandler = contracts.CallResourceHandler

	// CallResourceHandlerFunc is an adapter to allow the use of
	// ordinary functions as [CallResourceHandler]. If f is a function
	// with the appropriate signature, CallResourceHandlerFunc(f) is a
	// [CallResourceHandler] that calls f.
	CallResourceHandlerFunc = contracts.CallResourceHandlerFunc

	// CallResourceRequest represents a request for a resource call.
	CallResourceRequest = contracts.CallResourceRequest

	// CallResourceResponse represents a response from a resource call.
	CallResourceResponse = contracts.CallResourceResponse

	// CallResourceResponseSender is used for sending resource call responses.
	CallResourceResponseSender = contracts.CallResourceResponseSender

	// CallResourceResponseSenderFunc is an adapter to allow the use of
	// ordinary functions as [CallResourceResponseSender]. If f is a function
	// with the appropriate signature, CallResourceResponseSenderFunc(f) is a
	// [CallResourceResponseSender] that calls f.
	CallResourceResponseSenderFunc = contracts.CallResourceResponseSenderFunc

	// CheckHealthHandler enables users to send health check
	// requests to a backend plugin
	CheckHealthHandler = contracts.CheckHealthHandler

	// CheckHealthHandlerFunc is an adapter to allow the use of
	// ordinary functions as [CheckHealthHandler]. If f is a function
	// with the appropriate signature, CheckHealthHandlerFunc(f) is a
	// [CheckHealthHandler] that calls f.
	CheckHealthHandlerFunc = contracts.CheckHealthHandlerFunc

	// CheckHealthRequest contains the healthcheck request
	CheckHealthRequest = contracts.CheckHealthRequest

	// CheckHealthResult contains the healthcheck response
	CheckHealthResult = contracts.CheckHealthResult

	// CollectMetricsHandler handles metric collection.
	CollectMetricsHandler = contracts.CollectMetricsHandler

	// CollectMetricsHandlerFunc is an adapter to allow the use of
	// ordinary functions as backend.CollectMetricsHandler. If f is a function
	// with the appropriate signature, CollectMetricsHandlerFunc(f) is a
	// Handler that calls f.
	CollectMetricsHandlerFunc = contracts.CollectMetricsHandlerFunc

	// CollectMetricsRequest contains the metrics request
	CollectMetricsRequest = contracts.CollectMetricsRequest

	// CollectMetricsResult collect metrics result.
	CollectMetricsResult = contracts.CollectMetricsResult

	ConversionHandler = contracts.ConversionHandler

	// ConversionRequest supports converting an object from on version to another
	ConversionRequest = contracts.ConversionRequest

	ConversionResponse = contracts.ConversionResponse

	// ConvertFromProtobuf has a collection of methods for converting from the autogenerated
	// protobuf go code to our SDK objects. This object exists to attach a collection
	// of conversion methods to.
	//
	// This is used internally by the SDK and inside Grafana-server, plugin authors should not
	// need this functionality.
	ConvertFromProtobuf = contracts.ConvertFromProtobuf

	ConvertObjectsFunc = contracts.ConvertObjectsFunc

	// ConvertToProtobuf has a collection of methods for converting the autogenerated
	// protobuf go code to our SDK objects. This object exists to attach a collection
	// of conversion methods to.
	//
	// This is used internally by the SDK and inside Grafana-server, plugin authors should not
	// need this functionality.
	ConvertToProtobuf = contracts.ConvertToProtobuf

	// DataQuery represents a single query as sent from the frontend.
	// A slice of DataQuery makes up the Queries property of a QueryDataRequest.
	DataQuery = contracts.DataQuery

	// DataResponse contains the results from a DataQuery.
	// A map of RefIDs (unique query identifiers) to this type makes up the Responses property of a QueryDataResponse.
	// The Error property is used to allow for partial success responses from the containing QueryDataResponse.
	//
	//swagger:model
	DataResponse = contracts.DataResponse

	// DataSourceInstanceSettings represents settings for a data source instance.
	//
	// In Grafana a data source instance is a data source plugin of certain
	// type that have been configured and created in a Grafana organization.
	DataSourceInstanceSettings = contracts.DataSourceInstanceSettings

	// Endpoint used for defining names for endpoints/handlers.
	Endpoint = contracts.Endpoint

	FeatureToggles = contracts.FeatureToggles

	// ForwardHTTPHeaders interface marking that forward of HTTP headers is supported.
	ForwardHTTPHeaders = contracts.ForwardHTTPHeaders

	GrafanaCfg = contracts.GrafanaCfg

	GroupVersion = contracts.GroupVersion

	// Identify the Object properties
	GroupVersionKind = contracts.GroupVersionKind

	// HTTPSettings is a convenient struct for holding decoded HTTP settings from
	// jsonData and secureJSONData.
	HTTPSettings = contracts.HTTPSettings

	// HealthStatus is the status of the plugin.
	HealthStatus = contracts.HealthStatus

	// InitialData to send to a client upon a successful subscription to a channel.
	InitialData = contracts.InitialData

	MutateAdmissionFunc = contracts.MutateAdmissionFunc

	MutationResponse = contracts.MutationResponse

	// PluginContext holds contextual information about a plugin request, such as
	// Grafana organization, user and plugin instance settings.
	PluginContext = contracts.PluginContext

	Proxy = contracts.Proxy

	// PublishStreamHandler handles stream publication.
	PublishStreamHandler = contracts.PublishStreamHandler

	// PublishStreamHandlerFunc is an adapter to allow the use of
	// ordinary functions as backend.PublishStreamHandler. If f is a function
	// with the appropriate signature, SubscribeStreamHandlerFunc(f) is a
	// Handler that calls f.
	PublishStreamHandlerFunc = contracts.PublishStreamHandlerFunc

	// PublishStreamRequest represents a request for a publish stream call.
	PublishStreamRequest = contracts.PublishStreamRequest

	// PublishStreamResponse represents a response for a publish stream call.
	PublishStreamResponse = contracts.PublishStreamResponse

	// PublishStreamStatus is a status of publication response.
	PublishStreamStatus = contracts.PublishStreamStatus

	// QueryDataHandler handles data queries.
	QueryDataHandler = contracts.QueryDataHandler

	// QueryDataHandlerFunc is an adapter to allow the use of
	// ordinary functions as [QueryDataHandler]. If f is a function
	// with the appropriate signature, QueryDataHandlerFunc(f) is a
	// [QueryDataHandler] that calls f.
	QueryDataHandlerFunc = contracts.QueryDataHandlerFunc

	// QueryDataRequest contains a single request which contains multiple queries.
	// It is the input type for a QueryData call.
	QueryDataRequest = contracts.QueryDataRequest

	// QueryDataResponse contains the results from a QueryDataRequest.
	// It is the return type of a QueryData call.
	QueryDataResponse = contracts.QueryDataResponse

	RawObject = contracts.RawObject

	// Responses is a map of RefIDs (Unique Query ID) to DataResponses.
	// The QueryData method the QueryDataHandler method will set the RefId
	// property on the DataResponses' frames based on these RefIDs.
	//
	//swagger:model
	Responses = contracts.Responses

	// RunStreamHandler handles running of streams.
	RunStreamHandler = contracts.RunStreamHandler

	// RunStreamHandlerFunc is an adapter to allow the use of
	// ordinary functions as backend.RunStreamHandler. If f is a function
	// with the appropriate signature, RunStreamHandlerFunc(f) is a
	// Handler that calls f.
	RunStreamHandlerFunc = contracts.RunStreamHandlerFunc

	// RunStreamRequest represents a request for a run stream call.
	RunStreamRequest = contracts.RunStreamRequest

	SQLConfig = contracts.SQLConfig

	Status = contracts.Status

	StatusResult = contracts.StatusResult

	// StreamHandler handles streams.
	StreamHandler = contracts.StreamHandler

	// StreamPacket represents a stream packet.
	StreamPacket = contracts.StreamPacket

	// StreamPacketSender is used for sending StreamPacket responses.
	StreamPacketSender = contracts.StreamPacketSender

	// StreamSender allows sending data to a stream.
	StreamSender = contracts.StreamSender

	// SubscribeStreamHandler handles stream subscription.
	SubscribeStreamHandler = contracts.SubscribeStreamHandler

	// SubscribeStreamHandlerFunc is an adapter to allow the use of
	// ordinary functions as backend.SubscribeStreamHandler. If f is a function
	// with the appropriate signature, SubscribeStreamHandlerFunc(f) is a
	// Handler that calls f.
	SubscribeStreamHandlerFunc = contracts.SubscribeStreamHandlerFunc

	// SubscribeStreamRequest represents a request for a subscribe stream call.
	SubscribeStreamRequest = contracts.SubscribeStreamRequest

	// SubscribeStreamResponse represents a response for a subscribe stream call.
	SubscribeStreamResponse = contracts.SubscribeStreamResponse

	// SubscribeStreamStatus is a status of subscription response.
	SubscribeStreamStatus = contracts.SubscribeStreamStatus

	// TimeRange represents a time range for a query and is a property of DataQuery.
	TimeRange = contracts.TimeRange

	// User represents a Grafana user.
	User = contracts.User

	ValidateAdmissionFunc = contracts.ValidateAdmissionFunc

	// Basic request to say if the validation was successful or not
	ValidationResponse = contracts.ValidationResponse
)

func AppInstanceSettingsFromProto(body []byte) (*AppInstanceSettings, error)  {
	return contracts.AppInstanceSettingsFromProto(body)
}

func AppInstanceSettingsToProtoBytes(s *AppInstanceSettings) ([]byte, error)  {
	return contracts.AppInstanceSettingsToProtoBytes(s)
}

func DataSourceInstanceSettingsFromProto(body []byte, pluginID string) (*DataSourceInstanceSettings, error)  {
	return contracts.DataSourceInstanceSettingsFromProto(body, pluginID)
}

func DataSourceInstanceSettingsToProtoBytes(s *DataSourceInstanceSettings) ([]byte, error)  {
	return contracts.DataSourceInstanceSettingsToProtoBytes(s)
}

// EndpointFromContext extracts [Endpoint] from ctx if available, otherwise empty [Endpoint].
func EndpointFromContext(ctx context.Context) Endpoint {
	return contracts.EndpointFromContext(ctx)
}

// ErrDataResponse returns an error DataResponse given status and message.
func ErrDataResponse(status Status, message string) DataResponse {
	return contracts.ErrDataResponse(status, message)
}

// ErrDataResponseWithSource returns an error DataResponse given status, source of the error and message.
func ErrDataResponseWithSource(status Status, src status.Source, message string) DataResponse {
	return contracts.ErrDataResponseWithSource(status, src, message)
}

// FromProto returns a new ConvertFromProtobuf.
func FromProto() ConvertFromProtobuf {
	return contracts.FromProto()
}

// GrafanaConfigFromContext returns Grafana config from context.
func GrafanaConfigFromContext(ctx context.Context) *GrafanaCfg {
	return contracts.GrafanaConfigFromContext(ctx)
}

// JSONDataFromHTTPClientOptions extracts JSON data from CustomOptions of httpclient.Options.
func JSONDataFromHTTPClientOptions(opts httpclient.Options) map[string]any {
	return contracts.JSONDataFromHTTPClientOptions(opts)
}

func NewGrafanaCfg(cfg map[string]string) *GrafanaCfg {
	return contracts.NewGrafanaCfg(cfg)
}

// NewInitialData allows sending JSON on subscription
func NewInitialData(data json.RawMessage) (*InitialData, error)  {
	return contracts.NewInitialData(data)
}

// NewInitialFrame allows creating frame as subscription InitialData.
func NewInitialFrame(frame *data.Frame, include data.FrameInclude) (*InitialData, error)  {
	return contracts.NewInitialFrame(frame, include)
}

// NewQueryDataResponse returns a QueryDataResponse with the Responses property initialized.
func NewQueryDataResponse() *QueryDataResponse {
	return contracts.NewQueryDataResponse()
}

// NewStreamSender createa a new StreamSender.
func NewStreamSender(packetSender StreamPacketSender) *StreamSender {
	return contracts.NewStreamSender(packetSender)
}

// PluginConfigFromContext returns [PluginContext] from context if available, otherwise empty [PluginContext].
func PluginConfigFromContext(ctx context.Context) PluginContext {
	return contracts.PluginConfigFromContext(ctx)
}

// SecureJSONDataFromHTTPClientOptions extracts secure JSON data from CustomOptions of httpclient.Options.
func SecureJSONDataFromHTTPClientOptions(opts httpclient.Options) map[string]string {
	return contracts.SecureJSONDataFromHTTPClientOptions(opts)
}

// StatusFromError return [Status] given err, otherwise [StatusUnknown].
func StatusFromError(err error) Status {
	return contracts.StatusFromError(err)
}

// ToProto returns a new ConvertToProtobuf.
func ToProto() ConvertToProtobuf {
	return contracts.ToProto()
}

// UserAgentFromContext returns user agent from context.
func UserAgentFromContext(ctx context.Context) *useragent.UserAgent {
	return contracts.UserAgentFromContext(ctx)
}

// UserFromContext returns [User] from context if available, otherwise nil.
func UserFromContext(ctx context.Context) *User {
	return contracts.UserFromContext(ctx)
}

// WithEndpoint adds endpoint to ctx.
func WithEndpoint(ctx context.Context, endpoint Endpoint) context.Context {
	return contracts.WithEndpoint(ctx, endpoint)
}

// WithGrafanaConfig injects supplied Grafana config into context.
func WithGrafanaConfig(ctx context.Context, cfg *GrafanaCfg) context.Context {
	return contracts.WithGrafanaConfig(ctx, cfg)
}

// WithPluginContext adds pluginCtx to ctx.
//
// Note: Used internally by SDK so you normally don't need to use/call this,
// unless in tests and such.
func WithPluginContext(ctx context.Context, pluginCtx PluginContext) context.Context {
	return contracts.WithPluginContext(ctx, pluginCtx)
}

// WithTenant injects supplied tenant ID into context.
func WithTenant(ctx context.Context, tenantID string) context.Context {
	return contracts.WithTenant(ctx, tenantID)
}

// WithPluginContext adds user to ctx.
//
// Note: Used internally by SDK so you normally don't need to use/call this,
// unless in tests and such.
func WithUser(ctx context.Context, user *User) context.Context {
	return contracts.WithUser(ctx, user)
}

// WithUserAgent injects supplied user agent into context.
func WithUserAgent(ctx context.Context, ua *useragent.UserAgent) context.Context {
	return contracts.WithUserAgent(ctx, ua)
}

